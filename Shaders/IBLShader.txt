
#ifdef VERTEX                            
                                             
attribute vec3 a_Position;                 
attribute vec2 a_TexCoord;                 
attribute vec3 a_Normal;  

attribute vec3 skyPos;                  
                                             
uniform mat4 u_Projection;                    
uniform mat4 u_Model;   
uniform mat4 u_View;                    
                                             
varying vec3 v_Normal;                      
varying vec2 v_TexCoord;     
varying vec3 v_Position;     
     
                                              
void main()                                
{                                            
  gl_Position = u_Projection * u_View *               
    u_Model * vec4(a_Position, 1);           
                                             
  v_Normal = a_Normal;                       
  v_TexCoord = a_TexCoord;    
  v_Position = vec3(u_Model * vec4(a_Position, 1)); 
       
}                                            
                                             
#endif                                      
#ifdef FRAGMENT                            
                                           
uniform sampler2D u_Texture;                  
                                            
varying vec3 v_Normal;                       
varying vec2 v_TexCoord;  
varying vec3 v_Position; 

   
//uniform vec3 albedo;
//uniform float metallic;
//uniform float roughness;
//uniform float ao; //ambient occlusion             

uniform sampler2D IMap;
uniform sampler2D albedoM;
uniform sampler2D metallicM;
uniform sampler2D roughnessM;
uniform sampler2D aoM;
uniform sampler2D normalM;
   

vec3 lightPos;
vec3 lightColour;

uniform vec3 camPos;

const float PI = 3.14159265359;

float DistributionGGX(vec3 N, vec3 H, float a);
float GeometrySchlickGGX(float NdotV, float k);
float GeometrySmith(vec3 N, vec3 V, vec3 L, float k);
vec3 fresnelSchlick(float cosTheta, vec3 F0);
                                              
void main()                                   
{         
  vec4 tex = texture2D(u_Texture, v_TexCoord); 

  float albedoR = pow(texture2D(albedoM,v_TexCoord).r,2.2);
  float albedoG = pow(texture2D(albedoM,v_TexCoord).g,2.2);
  float albedoB = pow(texture2D(albedoM,v_TexCoord).b,2.2);
  lightPos = v_Position + (vec3(1,1,1)*0.1);
  lightColour = texture2D(IMap,v_TexCoord).rgb;

  vec3 Normal = texture2D(normalM,v_TexCoord).rgb;
  float metallic = texture2D(metallicM,v_TexCoord).r;
  float roughness = texture2D(roughnessM,v_TexCoord).r;
  float ao = texture2D(aoM,v_TexCoord).r;
  
  vec3 N = normalize(Normal);
  vec3 V = normalize(camPos - v_Position);
  vec3 albedo = vec3(albedoR,albedoG,albedoB);
  vec3 F0 = vec3(0.04);
  F0 = mix(F0,albedo, metallic);
  vec3 Lo = vec3(0.0);
  //Radiance
   vec3 L = normalize(lightPos - v_Position); 
   vec3 H = normalize(V + L);
   float distance = length(lightPos - v_Position); 
   float attenuation = 1.0/(distance*distance);
   vec3 radiance = lightColour * attenuation; 
   
   //BRDF
   float NDF = DistributionGGX(N,H,roughness);
   float G = GeometrySmith(N,V,L, roughness);
   vec3 F = fresnelSchlick(max(dot(H,V),0.0),F0);
  
  float NdotL = max(dot(N,L),0.0001);

   vec3 kD = vec3(1.0) - F;
   kD *= 1.0 - metallic;
   
   vec3  numerator = NDF * G * F;
   float denominator = 4.0 * max(dot(N,V),0.0001) * NdotL;
   vec3 specular = numerator / max(denominator,0.001);
   
   Lo += (kD * albedo /PI + specular) * radiance * NdotL;
  vec3 ambient = vec3(0.03) * albedo * ao;
  vec3 colour = ambient + Lo;
  
  colour = colour/(colour + vec3(1.0));
  colour = pow(colour,vec3(1.5/2.2));
  
  gl_FragColor = tex * vec4(colour,1.0);
  
  if(gl_FragColor.x == 9) gl_FragColor.x = v_Normal.x;     
}                                            


float DistributionGGX(vec3 N, vec3 H, float a)
{
	float r = a * a;
    float a2 = r*r;
    float NdotH  = max(dot(N, H), 0.0);
    float NdotH2 = NdotH*NdotH;
	
    float nom = a2;
    float denom  = (NdotH2 * (a2 - 1.0) + 1.0);
    denom = PI * denom * denom;
	
    return nom / denom;
} 
float GeometrySchlickGGX(float NdotV, float k)
{
	float r = (k + 1.0);
	float r2 = (r*r)/8.0;
    float nom   = NdotV;
    float denom = NdotV * (1.0 - r2) + r2;
	
    return nom / denom;
} 
float GeometrySmith(vec3 N, vec3 V, vec3 L, float k)
{
    float NdotV = max(dot(N, V), 0.0001);
    float NdotL = max(dot(N, L), 0.0001);
    float ggx1 = GeometrySchlickGGX(NdotV, k);
    float ggx2 = GeometrySchlickGGX(NdotL, k);
	
    return ggx1 * ggx2;
} 
vec3 fresnelSchlick(float cosTheta, vec3 F0)
{
    return F0 + (1.0 - F0) * pow(1.0 - cosTheta, 5.0);
}                                          
#endif                                       